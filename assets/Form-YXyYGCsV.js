import{j as l,r as h}from"./index-ZVYxoX19.js";import{p as b}from"./viewport-1IkFLRB6.js";import{u as x}from"./Gallery-vzSRe3eA.js";import{a as k,j as n}from"./request-MvzBsxCw.js";import{F as w,a as C,u as S}from"./FormInput-WOYGzdyc.js";const M=a=>{const{showErrorMessage:t=!0,...u}=a,e=x(()=>k({}));return l.jsx(w.Provider,{value:x(()=>({showErrorMessage:t,fields:e,getField:r=>n.get(e)[r],addField:(r,o)=>{n.set(e,s=>({...s,[r]:o}))},removeField:r=>{n.set(e,o=>{const s={...o};return delete s[r],s})}})),children:l.jsx(C.Provider,{value:h.useMemo(()=>({showErrorMessage:t}),[t]),children:l.jsx($,{...u})})})},$=a=>{const{onSubmit:t,...u}=a,e=S().fields,r=h.useCallback(async o=>{o.preventDefault();const s=n.get(e);for await(const[f,m]of Object.entries(s)){const c=m.$ref;if(!c)continue;const d=c.value,p=m.rules;for(let i=0;i<p.length;i++){const v=p[i];try{if(!await v.validator(d)){console.error(`Form validation failed, at field \`${f}\`, got value \`${d}\``),c.focus(),v.message&&n.set(e,j=>b(j,g=>{g[f].rules[i].status="error"}));return}}catch(F){console.error("validate function throw error",F);return}}}t?.(o)},[t]);return l.jsx("form",{onSubmit:r,...u,children:a.children})};export{M as F};
